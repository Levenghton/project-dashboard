import streamlit as st
import pandas as pd
import boto3
import json
import os
from datetime import datetime, timedelta
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('gift-dashboard')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title='–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –î–∞—à–±–æ—Ä–¥',
    page_icon='üéÅ',
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title('üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –î–∞—à–±–æ—Ä–¥')
st.markdown('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º –∏–∑ AWS S3')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AWS –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Streamlit –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
def get_aws_settings():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ Streamlit Cloud
    if 'aws' in st.secrets:
        aws_access_key = st.secrets['aws']['aws_access_key']
        aws_secret_key = st.secrets['aws']['aws_secret_key']
        bucket_name = st.secrets['aws'].get('bucket_name', 'technicalgiftagram')
        prefix = st.secrets['aws'].get('prefix', 'processed-logs/funds-log/5min/')
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á–∏
        st.sidebar.text("‚úÖ AWS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Secrets")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        aws_access_key = st.sidebar.text_input('AWS Access Key ID', value='YOUR_ACCESS_KEY', type='password')
        aws_secret_key = st.sidebar.text_input('AWS Secret Access Key', value='YOUR_SECRET_KEY', type='password')
        bucket_name = st.sidebar.text_input('–ò–º—è –±–∞–∫–µ—Ç–∞ S3', value='technicalgiftagram')
        prefix = st.sidebar.text_input('–ü—Ä–µ—Ñ–∏–∫—Å (–ø—É—Ç—å)', value='processed-logs/funds-log/5min/')
    
    return aws_access_key, aws_secret_key, bucket_name, prefix

# –ü–æ–ª—É—á–∞–µ–º AWS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
aws_access_key, aws_secret_key, bucket_name, prefix = get_aws_settings()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
st.sidebar.header('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_settings():
    settings = {
        "aws_access_key": aws_access_key,
        "aws_secret_key": aws_secret_key,
        "bucket_name": bucket_name,
        "prefix": prefix
    }
    
    config_path = Path('streamlit_config.json')
    with open(config_path, 'w') as f:
        json.dump(settings, f, indent=4)
    
    return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@st.cache_data
def load_settings():
    config_path = Path('streamlit_config.json')
    if config_path.exists():
        with open(config_path, 'r') as f:
            settings = json.load(f)
        return settings
    return None

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
if 'aws' not in st.secrets:
    if st.sidebar.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'):
        status = save_settings()
        st.sidebar.success(status)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3
def connect_to_s3(aws_access_key, aws_secret_key):
    try:
        s3_client = boto3.client(
            's3',
            aws_access_key_id=aws_access_key,
            aws_secret_access_key=aws_secret_key
        )
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—É—Ç–µ–º –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –±–∞–∫–µ—Ç–æ–≤
        s3_client.list_buckets()
        return s3_client, None
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AWS S3: {str(e)}"
        logger.error(error_message)
        return None, error_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ
def list_files_in_bucket(s3_client, bucket_name, prefix=''):
    try:
        objects = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
        
        if 'Contents' not in objects:
            return [], f"–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∫–µ—Ç–µ {bucket_name} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix}"
        
        file_list = [obj['Key'] for obj in objects['Contents'] if obj['Key'].endswith('.json')]
        return file_list, None
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}"
        logger.error(error_message)
        return [], error_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ S3
@st.cache_data
def load_file_from_s3(_s3_client, bucket_name, file_key):
    try:
        response = _s3_client.get_object(Bucket=bucket_name, Key=file_key)
        file_content = response['Body'].read().decode('utf-8')
        json_data = json.loads(file_content)
        return json_data, None
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {file_key}: {str(e)}"
        logger.error(error_message)
        return None, error_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö JSON –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ DataFrame
def process_json_data(json_data, file_name):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JSON-–¥–∞–Ω–Ω—ã—Ö (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
        if isinstance(json_data, list):
            # –°–æ–∑–¥–∞–µ–º DataFrame –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
            df = pd.DataFrame(json_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            df['file_name'] = file_name
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë –≤ —á–∏—Ç–∞–µ–º—É—é –¥–∞—Ç—É
            if 'Timestamp' in df.columns:
                df['Datetime'] = pd.to_datetime(df['Timestamp'], unit='s')
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —á–∞—Å–æ–º –∏ –¥–Ω–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                df['Hour'] = df['Datetime'].dt.hour
                df['Date'] = df['Datetime'].dt.date
            
            return df, None
        else:
            error_message = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ {file_name}: –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º JSON-–æ–±—ä–µ–∫—Ç–æ–≤"
            logger.error(error_message)
            return None, error_message
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {file_name}: {str(e)}"
        logger.error(error_message)
        return None, error_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ (Stars)
def determine_tier(stars):
    if stars <= 25:
        return '25 Stars'
    elif stars <= 50:
        return '50 Stars'
    else:
        return '100+ Stars'

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.header('üìÇ –î–∞–Ω–Ω—ã–µ –∏–∑ AWS S3')

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3
if st.button('–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AWS –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3
    with st.spinner('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AWS S3...'):
        s3_client, connection_error = connect_to_s3(aws_access_key, aws_secret_key)
    
    if connection_error:
        st.error(connection_error)
    else:
        st.success('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AWS S3')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        with st.spinner('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...'):
            file_list, list_error = list_files_in_bucket(s3_client, bucket_name, prefix)
        
        if list_error:
            st.error(list_error)
        elif not file_list:
            st.warning(f'–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∫–µ—Ç–µ {bucket_name} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix}')
        else:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            st.subheader(f'–ù–∞–π–¥–µ–Ω–æ {len(file_list)} —Ñ–∞–π–ª–æ–≤:')
            st.text(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            progress_bar = st.progress(0)
            all_data = []
            
            for i, file_key in enumerate(file_list):
                progress = (i + 1) / len(file_list)
                progress_bar.progress(progress, text=f'–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {i+1} –∏–∑ {len(file_list)}')
                
                with st.spinner(f'–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {file_key}...'):
                    json_data, load_error = load_file_from_s3(s3_client, bucket_name, file_key)
                
                if load_error:
                    st.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª {file_key}: {load_error}")
                else:
                    file_name = Path(file_key).name
                    df, process_error = process_json_data(json_data, file_name)
                    
                    if process_error:
                        st.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª {file_name}: {process_error}")
                    else:
                        all_data.append(df)
            
            if all_data:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                combined_df = pd.concat(all_data, ignore_index=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                st.subheader('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö')
                st.dataframe(combined_df.head(100), use_container_width=True)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
                st.subheader('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric('–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π', f"{len(combined_df):,}")
                
                if 'UserId' in combined_df.columns:
                    with col2:
                        st.metric('–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', f"{combined_df['UserId'].nunique():,}")
                
                if 'Amount' in combined_df.columns:
                    with col3:
                        st.metric('–û–±—â–∞—è —Å—É–º–º–∞', f"{combined_df['Amount'].sum():,.2f}")
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                st.subheader('–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ –¥–∞–Ω–Ω—ã—Ö
                if 'Date' in combined_df.columns:
                    min_date = pd.to_datetime(combined_df['Date'].min())
                    max_date = pd.to_datetime(combined_df['Date'].max())
                    
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if min_date.date() == max_date.date():
                        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –¥–ª—è –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                        default_start_date = min_date.date()
                        default_end_date = max_date.date()
                    else:
                        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –±–µ—Ä–µ–º –Ω–µ–¥–µ–ª—é –∏–ª–∏ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏
                        default_start_date = max(min_date.date(), (max_date - timedelta(days=7)).date())
                        default_end_date = max_date.date()
                    
                    # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
                    date_range = st.date_input(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
                        value=(default_start_date, default_end_date),
                        min_value=min_date.date(),
                        max_value=max_date.date()
                    )
                    
                    if len(date_range) == 2:
                        start_date, end_date = date_range
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
                        filtered_df = combined_df[
                            (combined_df['Date'] >= start_date) & 
                            (combined_df['Date'] <= end_date)
                        ]
                        
                        st.write(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: —Å {start_date} –ø–æ {end_date}")
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ –¥–Ω–∏
                        date_range_full = pd.date_range(start=start_date, end=end_date, freq='D')
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º
                        daily_transactions = filtered_df.groupby('Date').size().reset_index(name='Transactions')
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø–æ–ª–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
                        daily_df = pd.DataFrame({'Date': date_range_full.date})
                        
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∑–∞–ø–æ–ª–Ω—è—è –ø—Ä–æ–ø—É—Å–∫–∏ –Ω—É–ª—è–º–∏
                        daily_df = daily_df.merge(daily_transactions, on='Date', how='left').fillna(0)
                        
                        # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º
                        st.subheader('–û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º')
                        st.line_chart(daily_df, x='Date', y='Transactions')
                        
                        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                        hourly_transactions = filtered_df.groupby('Hour').size().reset_index(name='Transactions')
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å–æ–≤ (0-23)
                        hourly_df = pd.DataFrame({'Hour': range(24)})
                        
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∑–∞–ø–æ–ª–Ω—è—è –ø—Ä–æ–ø—É—Å–∫–∏ –Ω—É–ª—è–º–∏
                        hourly_df = hourly_df.merge(hourly_transactions, on='Hour', how='left').fillna(0)
                        
                        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        hourly_df = hourly_df.sort_values('Hour')
                        
                        # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º
                        st.subheader('–û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º')
                        st.bar_chart(hourly_df, x='Hour', y='Transactions')
                        
                        # –ù–û–í–´–ï –ì–†–ê–§–ò–ö–ò:
                        # -----------------------------------------------
                        
                        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - –ù–û–í–´–ô –†–ê–ó–î–ï–õ
                        if 'UserId' in filtered_df.columns:
                            st.header('üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
                            
                            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user_transactions = filtered_df.groupby('UserId').size().reset_index(name='TransactionCount')
                            
                            # –û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if 'Amount' in filtered_df.columns:
                                user_amounts = filtered_df.groupby('UserId')['Amount'].sum().reset_index(name='TotalAmount')
                                
                                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                user_stats = user_transactions.merge(user_amounts, on='UserId')
                                
                                # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                                avg_transactions_per_user = user_transactions['TransactionCount'].mean()
                                avg_amount_per_user = user_amounts['TotalAmount'].mean()
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                                st.subheader('–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.metric('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', f"{avg_transactions_per_user:.2f}")
                                with col2:
                                    st.metric('–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', f"{avg_amount_per_user:.2f}")
                                
                                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                                st.subheader('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
                                hist_data = pd.DataFrame({
                                    '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': user_stats['TransactionCount'].clip(upper=20)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                                })
                                st.bar_chart(hist_data)
                        
                        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏—Ä–∞–º - –ù–û–í–´–ô –†–ê–ó–î–ï–õ
                        if 'Amount' in filtered_df.columns:
                            st.header('üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏—Ä–∞–º')
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É Tier –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (Amount)
                            filtered_df['Tier'] = filtered_df['Amount'].apply(determine_tier)
                            
                            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏—Ä–∞–º
                            tier_counts = filtered_df.groupby('Tier').size().reset_index(name='Count')
                            
                            # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Ç–∏—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                            tier_order = ['25 Stars', '50 Stars', '100+ Stars']
                            tier_counts['Tier'] = pd.Categorical(tier_counts['Tier'], categories=tier_order, ordered=True)
                            tier_counts = tier_counts.sort_values('Tier')
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
                            st.subheader('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏—Ä–∞–º')
                            st.bar_chart(tier_counts, x='Tier', y='Count')
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–∫–∂–µ –æ–±—â—É—é —Å—É–º–º—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏—Ä—É
                            tier_amounts = filtered_df.groupby('Tier')['Amount'].sum().reset_index(name='TotalAmount')
                            tier_amounts['Tier'] = pd.Categorical(tier_amounts['Tier'], categories=tier_order, ordered=True)
                            tier_amounts = tier_amounts.sort_values('Tier')
                            
                            st.subheader('–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏—Ä–∞–º')
                            st.bar_chart(tier_amounts, x='Tier', y='TotalAmount')
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                st.session_state['data'] = combined_df
                
                st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!')

# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
st.sidebar.markdown('---')
st.sidebar.info('''
### –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, 
–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ AWS S3.

¬© 2025 –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –î–∞—à–±–æ—Ä–¥
''')