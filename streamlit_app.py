import streamlit as st
import pandas as pd
import boto3
import json
import os
from datetime import datetime, timedelta
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('gift-dashboard')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title='–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –î–∞—à–±–æ—Ä–¥',
    page_icon='üéÅ',
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title('üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –î–∞—à–±–æ—Ä–¥')
st.markdown('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º –∏–∑ AWS S3')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AWS –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Streamlit –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
def get_aws_settings():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ Streamlit Cloud
    if 'aws' in st.secrets:
        aws_access_key = st.secrets['aws']['aws_access_key']
        aws_secret_key = st.secrets['aws']['aws_secret_key']
        bucket_name = st.secrets['aws'].get('bucket_name', 'technicalgiftagram')
        prefix = st.secrets['aws'].get('prefix', 'processed-logs/funds-log/5min/')
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤, –Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á–∏
        st.sidebar.text("‚úÖ AWS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Secrets")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        aws_access_key = st.sidebar.text_input('AWS Access Key ID', value='YOUR_ACCESS_KEY', type='password')
        aws_secret_key = st.sidebar.text_input('AWS Secret Access Key', value='YOUR_SECRET_KEY', type='password')
        bucket_name = st.sidebar.text_input('–ò–º—è –±–∞–∫–µ—Ç–∞ S3', value='technicalgiftagram')
        prefix = st.sidebar.text_input('–ü—Ä–µ—Ñ–∏–∫—Å (–ø—É—Ç—å)', value='processed-logs/funds-log/5min/')
    
    return aws_access_key, aws_secret_key, bucket_name, prefix

# –ü–æ–ª—É—á–∞–µ–º AWS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
aws_access_key, aws_secret_key, bucket_name, prefix = get_aws_settings()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
st.sidebar.header('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
def save_settings():
    settings = {
        "aws_access_key": aws_access_key,
        "aws_secret_key": aws_secret_key,
        "bucket_name": bucket_name,
        "prefix": prefix
    }
    
    config_path = Path('streamlit_config.json')
    with open(config_path, 'w') as f:
        json.dump(settings, f, indent=4)
    
    return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@st.cache_data
def load_settings():
    config_path = Path('streamlit_config.json')
    if config_path.exists():
        with open(config_path, 'r') as f:
            settings = json.load(f)
        return settings
    return None

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
if 'aws' not in st.secrets:
    if st.sidebar.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'):
        status = save_settings()
        st.sidebar.success(status)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3
def connect_to_s3(aws_access_key, aws_secret_key):
    try:
        s3_client = boto3.client(
            's3',
            aws_access_key_id=aws_access_key,
            aws_secret_access_key=aws_secret_key
        )
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—É—Ç–µ–º –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –±–∞–∫–µ—Ç–æ–≤
        s3_client.list_buckets()
        return s3_client, None
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AWS S3: {str(e)}"
        logger.error(error_message)
        return None, error_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ
def list_files_in_bucket(s3_client, bucket_name, prefix=''):
    try:
        objects = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
        
        if 'Contents' not in objects:
            return [], f"–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∫–µ—Ç–µ {bucket_name} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix}"
        
        file_list = [obj['Key'] for obj in objects['Contents'] if obj['Key'].endswith('.json')]
        return file_list, None
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}"
        logger.error(error_message)
        return [], error_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–∑ S3
@st.cache_data
def load_file_from_s3(_s3_client, bucket_name, file_key):
    try:
        response = _s3_client.get_object(Bucket=bucket_name, Key=file_key)
        file_content = response['Body'].read().decode('utf-8')
        json_data = json.loads(file_content)
        return json_data, None
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {file_key}: {str(e)}"
        logger.error(error_message)
        return None, error_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö JSON –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ DataFrame
def process_json_data(json_data, file_name):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JSON-–¥–∞–Ω–Ω—ã—Ö (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
        if isinstance(json_data, list):
            # –°–æ–∑–¥–∞–µ–º DataFrame –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
            df = pd.DataFrame(json_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            df['file_name'] = file_name
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë –≤ —á–∏—Ç–∞–µ–º—É—é –¥–∞—Ç—É
            if 'Timestamp' in df.columns:
                df['Datetime'] = pd.to_datetime(df['Timestamp'], unit='s')
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —á–∞—Å–æ–º –∏ –¥–Ω–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                df['Hour'] = df['Datetime'].dt.hour
                df['Date'] = df['Datetime'].dt.date
            
            return df, None
        else:
            error_message = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ {file_name}: –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º JSON-–æ–±—ä–µ–∫—Ç–æ–≤"
            logger.error(error_message)
            return None, error_message
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {file_name}: {str(e)}"
        logger.error(error_message)
        return None, error_message

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ (Stars)
def determine_tier(stars):
    if stars <= 25:
        return '25 Stars'
    elif stars <= 50:
        return '50 Stars'
    else:
        return '100+ Stars'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏
default_states = {
    'data': None,
    'combined_df': None,
    'filtered_df': None,
    'date_range': None,
    'show_created': True,
    'show_paid': True,
    'show_refunded': True,
    'last_error': None
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –≤ session_state
for key, default_value in default_states.items():
    if key not in st.session_state:
        st.session_state[key] = default_value

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ session_state
def get_state(key, default=None):
    """Get session state key safely with default fallback"""
    if key in st.session_state:
        return st.session_state[key]
    return default
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫
def log_error(message, error=None):
    error_text = f"{message}"
    if error:
        error_text += f": {str(error)}"
    st.session_state['last_error'] = error_text
    return error_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ S3
def update_filtered_data():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ session_state
        if get_state('data') is None:
            logger.info("update_filtered_data: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ session_state")
            return False
            
        if get_state('date_range') is None:
            logger.info("update_filtered_data: –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ session_state")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        date_range = get_state('date_range')
        if len(date_range) != 2:
            logger.warning(f"update_filtered_data: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –¥–ª–∏–Ω–∞ = {len(date_range)}")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        start_date, end_date = date_range
        data = get_state('data')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ Date
        if 'Date' not in data.columns:
            error_msg = "update_filtered_data: –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'Date'"
            log_error(error_msg)
            logger.error(error_msg)
            return False
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
        try:
            filtered_df = data[
                (data['Date'] >= start_date) & 
                (data['Date'] <= end_date)
            ]
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            logger.info(f"update_filtered_data: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(data)} —Å {start_date} –ø–æ {end_date}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
            st.session_state['filtered_df'] = filtered_df
            return True
        except Exception as e:
            error_msg = f"update_filtered_data: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            log_error(error_msg, e)
            logger.error(error_msg)
            return False
    except Exception as e:
        error_msg = f"update_filtered_data: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        log_error(error_msg, e)
        logger.error(error_msg)
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
def save_filter_settings(setting_name, value):
    """Safe function to save filter settings to session state"""
    try:
        previous_value = get_state(setting_name)
        st.session_state[setting_name] = value
        if previous_value != value:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
            logger.info(f'Changed filter setting {setting_name}: {previous_value} -> {value}')
        return True
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {setting_name}: {str(e)}"
        log_error(error_msg, e)
        logger.error(error_msg)
        return False

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.header('üìÇ –î–∞–Ω–Ω—ã–µ –∏–∑ AWS S3')

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ S3 –∏–ª–∏ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
if st.button('–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AWS –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_state
    st.session_state['data'] = None
    st.session_state['filtered_df'] = None
    st.session_state['date_range'] = None
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ S3
    with st.spinner('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AWS S3...'):
        s3_client, connection_error = connect_to_s3(aws_access_key, aws_secret_key)
    
    if connection_error:
        st.error(connection_error)
    else:
        st.success('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AWS S3')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        with st.spinner('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...'):
            file_list, list_error = list_files_in_bucket(s3_client, bucket_name, prefix)
        
        if list_error:
            st.error(list_error)
        elif not file_list:
            st.warning(f'–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∫–µ—Ç–µ {bucket_name} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix}')
        else:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            st.subheader(f'–ù–∞–π–¥–µ–Ω–æ {len(file_list)} —Ñ–∞–π–ª–æ–≤:')
            st.text(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            progress_bar = st.progress(0)
            all_data = []
            
            for i, file_key in enumerate(file_list):
                progress = (i + 1) / len(file_list)
                progress_bar.progress(progress, text=f'–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {i+1} –∏–∑ {len(file_list)}')
                
                with st.spinner(f'–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {file_key}...'):
                    json_data, load_error = load_file_from_s3(s3_client, bucket_name, file_key)
                
                if load_error:
                    st.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª {file_key}: {load_error}")
                else:
                    file_name = Path(file_key).name
                    df, process_error = process_json_data(json_data, file_name)
                    
                    if process_error:
                        st.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª {file_name}: {process_error}")
                    else:
                        all_data.append(df)
            
            if all_data:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                combined_df = pd.concat(all_data, ignore_index=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                st.subheader('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö')
                st.dataframe(combined_df.head(100), use_container_width=True)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
                st.subheader('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
                
                col1, col2 = st.columns(2)
                
                if 'UserId' in combined_df.columns:
                    with col1:
                        st.metric('–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', f"{combined_df['UserId'].nunique():,}")
                
                # –°—É–º–º–∞ —Å–ø–∏–Ω–æ–≤ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –¥–∞—Ç–µ
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
                st.subheader('–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ –¥–∞–Ω–Ω—ã—Ö
                if 'Date' in combined_df.columns:
                    min_date = pd.to_datetime(combined_df['Date'].min())
                    max_date = pd.to_datetime(combined_df['Date'].max())
                    
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if min_date.date() == max_date.date():
                        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –¥–ª—è –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                        default_start_date = min_date.date()
                        default_end_date = max_date.date()
                    else:
                        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –±–µ—Ä–µ–º –Ω–µ–¥–µ–ª—é –∏–ª–∏ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏
                        default_start_date = max(min_date.date(), (max_date - timedelta(days=7)).date())
                        default_end_date = max_date.date()
                    
                    # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ session_state
                    date_range = st.date_input(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
                        value=(default_start_date, default_end_date) if st.session_state['date_range'] is None else st.session_state['date_range'],
                        min_value=min_date.date(),
                        max_value=max_date.date(),
                        key="date_input"
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ session_state
                    st.session_state['date_range'] = date_range
                    
                    if len(date_range) == 2:
                        start_date, end_date = date_range
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
                        filtered_df = combined_df[
                            (combined_df['Date'] >= start_date) & 
                            (combined_df['Date'] <= end_date)
                        ]
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ session_state
                        st.session_state['filtered_df'] = filtered_df
                        
                        st.write(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: —Å {start_date} –ø–æ {end_date}")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å–ø–∏–Ω–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                        if 'Amount' in filtered_df.columns and 'InvoiceType' in filtered_df.columns:
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (InvoiceType = 1) –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                            paid_df = filtered_df[filtered_df['InvoiceType'] == 1]
                            with col2:
                                st.metric('–°—É–º–º–∞ —Å–ø–∏–Ω–æ–≤ –≤ stars', f"{paid_df['Amount'].sum():,.2f}")
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ –¥–Ω–∏
                        date_range_full = pd.date_range(start=start_date, end=end_date, freq='D')
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        st.subheader('–û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º')
                        
                        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –∫–ª—é—á–∞–º–∏ –¥–ª—è session_state
                        try:
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ session_state –µ—Å–ª–∏ –µ—Å—Ç—å
                                show_created = st.checkbox('–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã', value=get_state('show_created', True), key="show_created")
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ –≤ session_state
                                st.session_state['show_created'] = show_created
                            with col2:
                                show_paid = st.checkbox('–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ', value=get_state('show_paid', True), key="show_paid")
                                st.session_state['show_paid'] = show_paid
                            with col3:
                                show_refunded = st.checkbox('–í–æ–∑–≤—Ä–∞—Ç—ã', value=get_state('show_refunded', True), key="show_refunded")
                                st.session_state['show_refunded'] = show_refunded
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–±–æ–∫—Å–æ–≤: {str(e)}")
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                            show_created = True
                            show_paid = True
                            show_refunded = True
                        
                        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø–æ–ª–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
                        daily_df = pd.DataFrame({'Date': date_range_full.date})
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º –∏ —Ç–∏–ø—É –∏–Ω–≤–æ–π—Å–∞
                        if 'InvoiceType' in filtered_df.columns:
                            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                            invoice_types = {
                                0: '–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã',
                                1: '–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ',
                                2: '–í–æ–∑–≤—Ä–∞—Ç—ã'
                            }
                            
                            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º –∏ —Ç–∏–ø–∞–º
                            daily_by_type_df = daily_df.copy()
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                            for invoice_type, type_name in invoice_types.items():
                                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É –∏–Ω–≤–æ–π—Å–∞
                                type_df = filtered_df[filtered_df['InvoiceType'] == invoice_type]
                                
                                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º date() –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–æ –¥–∞—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                                if 'Datetime' in type_df.columns:
                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Datetime –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º
                                    type_df['Day'] = type_df['Datetime'].dt.date
                                    type_daily = type_df.groupby('Day').size().reset_index(name=type_name)
                                    type_daily.rename(columns={'Day': 'Date'}, inplace=True)
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ—Ç Datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º Date –∫–∞–∫ –µ—Å—Ç—å
                                    type_daily = type_df.groupby('Date').size().reset_index(name=type_name)
                                
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ä–∂
                                type_daily['Date'] = pd.to_datetime(type_daily['Date'])
                                daily_by_type_df['Date'] = pd.to_datetime(daily_by_type_df['Date'])
                                
                                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º DataFrame
                                daily_by_type_df = daily_by_type_df.merge(type_daily, on='Date', how='left').fillna(0)
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
                            columns_to_display = []
                            if show_created:
                                columns_to_display.append('–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã')
                            if show_paid:
                                columns_to_display.append('–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ')
                            if show_refunded:
                                columns_to_display.append('–í–æ–∑–≤—Ä–∞—Ç—ã')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –≤—ã–±—Ä–∞–Ω
                            try:
                                if columns_to_display:
                                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                    daily_by_type_df = daily_by_type_df.sort_values('Date')
                                    
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                    daily_by_type_df['Date_str'] = daily_by_type_df['Date'].dt.strftime('%Y-%m-%d')
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                                    st.bar_chart(daily_by_type_df, x='Date_str', y=columns_to_display)
                                    
                                    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                    with st.expander('–î–µ—Ç–∞–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º'):
                                        st.dataframe(daily_by_type_df[['Date_str'] + columns_to_display])
                            except Exception as e:
                                error_msg = log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –¥–Ω—è–º", e)
                                st.error(error_msg)
                            else:
                                st.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫
                            if 'Datetime' in filtered_df.columns:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Datetime –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º
                                filtered_df['Day'] = filtered_df['Datetime'].dt.date
                                daily_transactions = filtered_df.groupby('Day').size().reset_index(name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                                daily_transactions.rename(columns={'Day': 'Date'}, inplace=True)
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç Datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º Date –∫–∞–∫ –µ—Å—Ç—å
                                daily_transactions = filtered_df.groupby('Date').size().reset_index(name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                            
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–µ—Ä–∂–∞
                            daily_transactions['Date'] = pd.to_datetime(daily_transactions['Date'])
                            daily_df['Date'] = pd.to_datetime(daily_df['Date'])
                            
                            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            daily_df = daily_df.merge(daily_transactions, on='Date', how='left').fillna(0)
                            
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            daily_df = daily_df.sort_values('Date')
                            daily_df['Date_str'] = daily_df['Date'].dt.strftime('%Y-%m-%d')
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                            st.bar_chart(daily_df, x='Date_str', y='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                            
                            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            with st.expander('–î–µ—Ç–∞–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º'):
                                st.dataframe(daily_df[['Date_str', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏']])
                        
                        # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º
                        st.subheader('–û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —á–∞—Å–∞–º')
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å–æ–≤ (0-23)
                        hourly_df = pd.DataFrame({'Hour': range(24)})
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —á–∞—Å–∞–º –∏ —Ç–∏–ø—É –∏–Ω–≤–æ–π—Å–∞
                        if 'InvoiceType' in filtered_df.columns:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —á–µ–∫–±–æ–∫—Å—ã, —á—Ç–æ –∏ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                            
                            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º –∏ —Ç–∏–ø–∞–º
                            hourly_by_type_df = hourly_df.copy()
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                            for invoice_type, type_name in invoice_types.items():
                                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É –∏–Ω–≤–æ–π—Å–∞
                                type_df = filtered_df[filtered_df['InvoiceType'] == invoice_type]
                                
                                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
                                if 'Datetime' in type_df.columns:
                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Datetime –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —á–∞—Å–∞–º
                                    type_hourly = type_df.groupby(type_df['Datetime'].dt.hour).size().reset_index(name=type_name)
                                    type_hourly.columns = ['Hour', type_name]
                                elif 'Date' in type_df.columns and pd.api.types.is_datetime64_any_dtype(type_df['Date']):
                                    # –ï—Å–ª–∏ Date —è–≤–ª—è–µ—Ç—Å—è datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                                    type_hourly = type_df.groupby(type_df['Date'].dt.hour).size().reset_index(name=type_name)
                                    type_hourly.columns = ['Hour', type_name]
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ Datetime, –Ω–∏ Date –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º Hour –µ—Å–ª–∏ –µ—Å—Ç—å
                                    if 'Hour' in type_df.columns:
                                        type_hourly = type_df.groupby('Hour').size().reset_index(name=type_name)
                                    else:
                                        # –ï—Å–ª–∏ –Ω–µ—Ç —á–∞—Å–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame
                                        type_hourly = pd.DataFrame({'Hour': [], type_name: []})
                                
                                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º DataFrame
                                hourly_by_type_df = hourly_by_type_df.merge(type_hourly, on='Hour', how='left').fillna(0)
                            
                            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            hourly_by_type_df = hourly_by_type_df.sort_values('Hour')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –≤—ã–±—Ä–∞–Ω
                            if columns_to_display:
                                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                hourly_by_type_df = hourly_by_type_df.sort_values('Hour')
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                                st.bar_chart(hourly_by_type_df, x='Hour', y=columns_to_display)
                                
                                # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                with st.expander('–î–µ—Ç–∞–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º'):
                                    st.dataframe(hourly_by_type_df[['Hour'] + columns_to_display])
                            else:
                                st.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫
                            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
                            if 'Datetime' in filtered_df.columns:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Datetime –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —á–∞—Å–∞–º
                                hourly_transactions = filtered_df.groupby(filtered_df['Datetime'].dt.hour).size().reset_index(name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                                hourly_transactions.columns = ['Hour', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏']
                            elif 'Date' in filtered_df.columns and pd.api.types.is_datetime64_any_dtype(filtered_df['Date']):
                                # –ï—Å–ª–∏ Date —è–≤–ª—è–µ—Ç—Å—è datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                                hourly_transactions = filtered_df.groupby(filtered_df['Date'].dt.hour).size().reset_index(name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                                hourly_transactions.columns = ['Hour', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏']
                            elif 'Hour' in filtered_df.columns:
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ Hour, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                                hourly_transactions = filtered_df.groupby('Hour').size().reset_index(name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame
                                st.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —á–∞—Å–∞–º')
                                hourly_transactions = pd.DataFrame({'Hour': [], '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': []})
                            
                            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º DataFrame
                            hourly_df = hourly_df.merge(hourly_transactions, on='Hour', how='left').fillna(0)
                            
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            hourly_df = hourly_df.sort_values('Hour')
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                            st.bar_chart(hourly_df, x='Hour', y='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                            
                            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            with st.expander('–î–µ—Ç–∞–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º'):
                                st.dataframe(hourly_df[['Hour', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏']])
                        
                        # –ù–û–í–´–ï –ì–†–ê–§–ò–ö–ò:
                        # -----------------------------------------------
                        
                        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - –ù–û–í–´–ô –†–ê–ó–î–ï–õ
                        if 'UserId' in filtered_df.columns:
                            st.header('üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            if 'InvoiceType' in filtered_df.columns:
                                st.subheader('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
                                user_invoice_type = st.radio(
                                    "–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                                    ["–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã", "–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", "–í–æ–∑–≤—Ä–∞—Ç—ã"],
                                    horizontal=True
                                )
                                
                                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                                if user_invoice_type == "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã":
                                    user_filtered_df = filtered_df[filtered_df['InvoiceType'] == 0]
                                elif user_invoice_type == "–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ":
                                    user_filtered_df = filtered_df[filtered_df['InvoiceType'] == 1]
                                elif user_invoice_type == "–í–æ–∑–≤—Ä–∞—Ç—ã":
                                    user_filtered_df = filtered_df[filtered_df['InvoiceType'] == 2]
                                else:  # –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                                    user_filtered_df = filtered_df
                            else:
                                user_filtered_df = filtered_df
                            
                            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user_transactions = user_filtered_df.groupby('UserId').size().reset_index(name='TransactionCount')
                            
                            # –û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if 'Amount' in user_filtered_df.columns:
                                # –î–ª—è –º–µ—Ç—Ä–∏–∫–∏ —Å—É–º–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                                if 'InvoiceType' in filtered_df.columns and user_invoice_type == "–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":
                                    paid_filtered_df = user_filtered_df[user_filtered_df['InvoiceType'] == 1]
                                else:
                                    paid_filtered_df = user_filtered_df
                                
                                user_amounts = paid_filtered_df.groupby('UserId')['Amount'].sum().reset_index(name='TotalAmount')
                                
                                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                user_stats = user_transactions.merge(user_amounts, on='UserId')
                                
                                # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                                avg_transactions_per_user = user_transactions['TransactionCount'].mean()
                                avg_amount_per_user = user_amounts['TotalAmount'].mean()
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                                st.subheader('–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.metric('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', f"{avg_transactions_per_user:.2f}")
                                with col2:
                                    st.metric('–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', f"{avg_amount_per_user:.2f}")
                                
                                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                                st.subheader(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ({user_invoice_type.lower()})')
                                hist_data = pd.DataFrame({
                                    '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏': user_stats['TransactionCount'].clip(upper=20)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                                })
                                st.bar_chart(hist_data)
                        
                        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏—Ä–∞–º - –ù–û–í–´–ô –†–ê–ó–î–ï–õ
                        if 'Amount' in filtered_df.columns:
                            st.header('üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏—Ä–∞–º')
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ç–∏—Ä–∞–º
                            if 'InvoiceType' in filtered_df.columns:
                                st.subheader('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
                                tier_invoice_type = st.radio(
                                    "–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
                                    ["–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã", "–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", "–í–æ–∑–≤—Ä–∞—Ç—ã"],
                                    horizontal=True,
                                    key="tier_radio"
                                )
                                
                                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                                if tier_invoice_type == "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã":
                                    tier_filtered_df = filtered_df[filtered_df['InvoiceType'] == 0]
                                elif tier_invoice_type == "–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ":
                                    tier_filtered_df = filtered_df[filtered_df['InvoiceType'] == 1]
                                elif tier_invoice_type == "–í–æ–∑–≤—Ä–∞—Ç—ã":
                                    tier_filtered_df = filtered_df[filtered_df['InvoiceType'] == 2]
                                else:  # –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                                    tier_filtered_df = filtered_df
                            else:
                                tier_filtered_df = filtered_df
                                tier_invoice_type = "–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
                            
                            # –î–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏—Ä–∞–º –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã —Å—É–º–º—ã (Amount)
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É Tier –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (Amount)
                            tier_filtered_df['Tier'] = tier_filtered_df['Amount'].apply(determine_tier)
                            
                            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏—Ä–∞–º
                            tier_counts = tier_filtered_df.groupby('Tier').size().reset_index(name='Count')
                            
                            # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Ç–∏—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                            tier_order = ['25 Stars', '50 Stars', '100+ Stars']
                            tier_counts['Tier'] = pd.Categorical(tier_counts['Tier'], categories=tier_order, ordered=True)
                            tier_counts = tier_counts.sort_values('Tier')
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
                            st.subheader(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏—Ä–∞–º ({tier_invoice_type.lower()})')
                            st.bar_chart(tier_counts, x='Tier', y='Count')
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–∫–∂–µ –æ–±—â—É—é —Å—É–º–º—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏—Ä—É
                            tier_amounts = tier_filtered_df.groupby('Tier')['Amount'].sum().reset_index(name='TotalAmount')
                            tier_amounts['Tier'] = pd.Categorical(tier_amounts['Tier'], categories=tier_order, ordered=True)
                            tier_amounts = tier_amounts.sort_values('Tier')
                            
                            st.subheader(f'–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏—Ä–∞–º ({tier_invoice_type.lower()})')
                            st.bar_chart(tier_amounts, x='Tier', y='TotalAmount')
                        
                        # –ê–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        if 'UserId' in filtered_df.columns and 'Date' in filtered_df.columns and 'InvoiceType' in filtered_df.columns:
                            st.header('üéÅ –ê–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (InvoiceType = 1)
                            paid_transactions = filtered_df[filtered_df['InvoiceType'] == 1]
                            
                            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –¥–Ω—è–º
                            paid_transactions['Date'] = pd.to_datetime(paid_transactions['Date']).dt.date
                            
                            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–Ω—è–º
                            user_daily_counts = paid_transactions.groupby(['UserId', 'Date']).size().reset_index(name='DailyCount')
                            
                            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user_total_counts = paid_transactions.groupby('UserId').size().reset_index(name='TotalCount')
                            
                            # –ê–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã –≤–æ–≤–ª–µ—á–µ–Ω–∏—è - —Å—á–∏—Ç–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                            engagement_counts = user_total_counts['TotalCount'].value_counts().reset_index()
                            engagement_counts.columns = ['SpinCount', 'UserCount']
                            engagement_counts = engagement_counts.sort_values('SpinCount')
                            
                            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            total_users = user_total_counts['UserId'].nunique()
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
                            engagement_counts['Percentage'] = (engagement_counts['UserCount'] / total_users * 100).round(2)
                            
                            st.subheader('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤')
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø–µ—Ä–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                            if len(engagement_counts) > 10:
                                display_counts = engagement_counts.head(10)
                                st.info(f'–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ {len(engagement_counts)}')
                            else:
                                display_counts = engagement_counts
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                            st.write('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∏–Ω–æ–≤:')
                            display_df = display_counts.rename(columns={
                                'SpinCount': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤', 
                                'UserCount': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 
                                'Percentage': '–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (%)'}
                            )
                            st.dataframe(display_df)
                            
                            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            st.bar_chart(display_counts, x='SpinCount', y='UserCount')
                            
                            # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º
                            st.subheader('–ì–ª—É–±–∏–Ω–∞ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º')
                            
                            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å
                            daily_unique_users = paid_transactions.groupby('Date')['UserId'].nunique().reset_index(name='UniqueUsers')
                            
                            # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∏–Ω–æ–≤ –≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
                            daily_engagement = []
                            unique_dates = sorted(paid_transactions['Date'].unique())
                            
                            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Å—á–∏—Ç–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                            for date in unique_dates:
                                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
                                day_data = paid_transactions[paid_transactions['Date'] == date]
                                
                                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                                user_counts = day_data.groupby('UserId').size().reset_index(name='SpinCount')
                                
                                # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∏–Ω–æ–≤
                                spin_distribution = user_counts['SpinCount'].value_counts().reset_index()
                                spin_distribution.columns = ['SpinCount', 'UserCount']
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                                total_users_day = user_counts['UserId'].nunique()
                                spin_distribution['Percentage'] = (spin_distribution['UserCount'] / total_users_day * 100).round(2)
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
                                spin_distribution['Date'] = date
                                
                                daily_engagement.append(spin_distribution)
                            
                            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω DataFrame
                            if daily_engagement:
                                all_daily_engagement = pd.concat(daily_engagement)
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–∏–Ω–æ–≤
                                spin_counts = sorted(all_daily_engagement['SpinCount'].unique())
                                
                                # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–∏–Ω–æ–≤
                                selected_spins = st.multiselect(
                                    '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏', 
                                    options=spin_counts,
                                    default=[1, 2, 3] if 1 in spin_counts and 2 in spin_counts and 3 in spin_counts else spin_counts[:min(3, len(spin_counts))]
                                )
                                
                                if selected_spins:
                                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                                    filtered_data = all_daily_engagement[all_daily_engagement['SpinCount'].isin(selected_spins)]
                                    
                                    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                                    pivot_data = filtered_data.pivot(index='Date', columns='SpinCount', values='Percentage').reset_index()
                                    
                                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                                    pivot_data.columns = ['Date'] + [f'{x} —Å–ø–∏–Ω' if x == 1 else f'{x} —Å–ø–∏–Ω–∞' if 1 < x < 5 else f'{x} —Å–ø–∏–Ω–æ–≤' for x in pivot_data.columns[1:]]
                                    
                                    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                                    st.line_chart(pivot_data, x='Date')
                                    
                                    st.info('–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–¥–µ–ª–∞–≤—à–∏—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤ –≤ –¥–µ–Ω—å')
                            
                            # –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            st.header('üîÑ –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–∫–∂–µ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
                            paid_transactions['Date'] = pd.to_datetime(paid_transactions['Date'])
                            
                            # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            first_transactions = paid_transactions.groupby('UserId')['Date'].min().reset_index()
                            first_transactions.rename(columns={'Date': 'FirstDate'}, inplace=True)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É
                            user_activity = pd.merge(paid_transactions, first_transactions, on='UserId')
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –∏ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            user_activity['DayDifference'] = (user_activity['Date'] - user_activity['FirstDate']).dt.days
                            
                            # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ 0 –¥–Ω–µ–π (—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
                            retention_data = user_activity[user_activity['DayDifference'] > 0]
                            
                            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –∏ —Å—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            retention_counts = retention_data.groupby('DayDifference')['UserId'].nunique().reset_index()
                            retention_counts.columns = ['Day', 'ReturnedUsers']
                            
                            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            total_users = first_transactions.shape[0]
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞
                            retention_counts['RetentionRate'] = (retention_counts['ReturnedUsers'] / total_users * 100).round(2)
                            
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 30 –¥–Ω–µ–π –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                            if len(retention_counts) > 0:
                                max_days_to_show = 30
                                if retention_counts['Day'].max() > max_days_to_show:
                                    display_retention = retention_counts[retention_counts['Day'] <= max_days_to_show]
                                    st.info(f'–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ç–µ–Ω—à–µ–Ω –∑–∞ –ø–µ—Ä–≤—ã–µ {max_days_to_show} –¥–Ω–µ–π')
                                else:
                                    display_retention = retention_counts
                                
                                # –°–æ–∑–¥–∞–µ–º —á–µ—Ç–∫—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                                st.subheader('–†–µ—Ç–µ–Ω—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º')
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ—Ç–µ–Ω—à–µ–Ω–æ–º
                                display_df = display_retention.rename(columns={
                                    'Day': '–î–µ–Ω—å', 
                                    'ReturnedUsers': '–í–µ—Ä–Ω—É–≤—à–∏–µ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 
                                    'RetentionRate': '–†–µ—Ç–µ–Ω—à–µ–Ω (%)'
                                })
                                st.dataframe(display_df)
                                
                                # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞
                                st.line_chart(display_retention, x='Day', y='RetentionRate')
                                st.info('–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                            else:
                                st.warning('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞')
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∫–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—é –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            st.subheader('–ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                            
                            # –í—ã–¥–µ–ª—è–µ–º –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º
                            user_activity['FirstDateDay'] = user_activity['FirstDate'].dt.date
                            user_activity['Date_Day'] = user_activity['Date'].dt.date
                            
                            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–≥–æ—Ä—Ç–µ
                            first_day_users = user_activity.groupby('FirstDateDay')['UserId'].nunique().reset_index()
                            first_day_users.columns = ['Cohort', 'NewUsers']
                            
                            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
                            if len(first_day_users) > 0:
                                # –°—á–∏—Ç–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ—Å—Ç—å –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º
                                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—é –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞, —Ç–µ–∫—É—â–µ–º—É –¥–Ω—é –∏ —Å—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                cohort_activity = user_activity.groupby(['FirstDateDay', 'Date_Day'])['UserId'].nunique().reset_index()
                                cohort_activity.columns = ['Cohort', 'Date', 'Users']
                                
                                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É –¥–∞—Ç–æ–π –ø–µ—Ä–≤–æ–π –∏ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                                try:
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                                    with st.expander('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞—Ç'):
                                        st.write(f"Cohort —Ç–∏–ø: {cohort_activity['Cohort'].dtype}")
                                        st.write(f"Date —Ç–∏–ø: {cohort_activity['Date'].dtype}")
                                        st.write(f"Cohort –ø—Ä–∏–º–µ—Ä: {cohort_activity['Cohort'].iloc[0]}")
                                        st.write(f"Date –ø—Ä–∏–º–µ—Ä: {cohort_activity['Date'].iloc[0]}")
                                    
                                    # –ú—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –∫–æ–ø–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                    cohort_activity['Cohort_dt'] = pd.to_datetime(cohort_activity['Cohort'])
                                    cohort_activity['Date_dt'] = pd.to_datetime(cohort_activity['Date'])
                                    
                                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
                                    cohort_activity['DayNumber'] = (cohort_activity['Date_dt'] - cohort_activity['Cohort_dt']).dt.days
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–Ω–∏—Ü—ã –¥–∞—Ç: {str(e)}")
                                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–∑–Ω–∏—Ü—ã –¥–Ω–µ–π
                                    st.warning('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–Ω–µ–π')
                                    
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏, –∞ –∑–∞—Ç–µ–º –≤ –¥–∞—Ç—ã
                                    cohort_activity['Cohort_str'] = cohort_activity['Cohort'].astype(str)
                                    cohort_activity['Date_str'] = cohort_activity['Date'].astype(str)
                                    
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–∞—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
                                    cohort_activity['Cohort_date'] = pd.to_datetime(cohort_activity['Cohort_str']).dt.date
                                    cohort_activity['Date_date'] = pd.to_datetime(cohort_activity['Date_str']).dt.date
                                    
                                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
                                    cohort_activity['DayNumber'] = [(date - cohort).days for cohort, date in zip(cohort_activity['Cohort_date'], cohort_activity['Date_date'])]
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –∫–∞–∂–¥–æ–π –∫–æ–≥–æ—Ä—Ç–µ
                                cohort_counts = cohort_activity.merge(first_day_users, on='Cohort')
                                
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–≥–æ—Ä—Ç—ã
                                cohort_counts['RetentionRate'] = (cohort_counts['Users'] / cohort_counts['NewUsers'] * 100).round(2)
                                
                                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                                retention_pivot = cohort_counts.pivot_table(index='Cohort', 
                                                                  columns='DayNumber', 
                                                                  values='RetentionRate')
                                
                                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –∫–æ–≥–æ—Ä—Ç –∏ –¥–Ω–µ–π –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                                max_cohorts = 10
                                max_days = 14
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                                try:
                                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                                    with st.expander('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'):
                                        st.write(f"retention_pivot —Ç–∏–ø: {type(retention_pivot)}")
                                        st.write(f"retention_pivot —Ä–∞–∑–º–µ—Ä: {retention_pivot.shape if hasattr(retention_pivot, 'shape') else 'N/A'}")
                                        st.write(f"retention_pivot —Å—Ç–æ–ª–±—Ü—ã: {list(retention_pivot.columns) if hasattr(retention_pivot, 'columns') else 'N/A'}")
                                    
                                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
                                    if len(retention_pivot) > max_cohorts:
                                        display_pivot = retention_pivot.iloc[:max_cohorts]
                                        st.info(f'–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ {max_cohorts} –∫–æ–≥–æ—Ä—Ç')
                                    else:
                                        display_pivot = retention_pivot
                                    
                                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                                    try:
                                        if display_pivot.columns.max() > max_days:
                                            display_columns = [col for col in display_pivot.columns if col <= max_days]
                                            display_pivot = display_pivot[display_columns]
                                            st.info(f'–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ç–µ–Ω—à–µ–Ω –∑–∞ –ø–µ—Ä–≤—ã–µ {max_days} –¥–Ω–µ–π')
                                    except Exception as e2:
                                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {str(e2)}")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–≥–æ—Ä—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã: {str(e)}")
                                    display_pivot = pd.DataFrame()  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–≥–æ—Ä—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
                                st.write('–ú–∞—Ç—Ä–∏—Ü–∞ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞ –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º (%):')
                                
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                display_pivot_formatted = display_pivot.copy()
                                display_pivot_formatted.index = display_pivot_formatted.index.strftime('%Y-%m-%d')
                                
                                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
                                display_pivot_formatted.columns = [f'–î–µ–Ω—å {col}' for col in display_pivot_formatted.columns]
                                
                                try:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                                    if display_pivot_formatted.empty:
                                        st.warning('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞')
                                    else:
                                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–º–µ–Ω–æ–π NaN –Ω–∞ –¥–µ—Ñ–∏—Å
                                        st.dataframe(display_pivot_formatted.fillna('-').style.background_gradient(cmap='YlGnBu', axis=None), use_container_width=True)
                                except Exception as e_display:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã: {str(e_display)}")
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Å—Ç–æ–º –≤–∏–¥–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                    try:
                                        st.dataframe(display_pivot_formatted, use_container_width=True)
                                    except:
                                        st.write('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞')
                                
                                st.info('–ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è –Ω–∞ N-–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ —Å—Ç—Ä–æ–∫–∞–º - –∫–æ–≥–æ—Ä—Ç—ã –ø–æ –¥–∞—Ç–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                                
                                try:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                                    if display_pivot.empty:
                                        st.warning('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞')
                                    else:
                                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞ –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º
                                        st.subheader('–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞ –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º')
                                        
                                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                                        try:
                                            # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 5 –∫–æ–≥–æ—Ä—Ç –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                                            max_cohorts_chart = 5
                                            cohort_selection = min(max_cohorts_chart, len(display_pivot))
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–æ–≥–æ—Ä—Ç–∞
                                            if cohort_selection > 0:
                                                # –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –¥–Ω–∏ –±—ã–ª–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –∞ –∫–æ–≥–æ—Ä—Ç—ã –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
                                                chart_data = display_pivot.iloc[:cohort_selection].T
                                                
                                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                                                try:
                                                    chart_data.columns = [str(date.strftime('%Y-%m-%d')) for date in chart_data.columns]
                                                except Exception as e_format:
                                                    st.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω –∫–æ–≥–æ—Ä—Ç: {str(e_format)}")
                                                    chart_data.columns = [f'–ö–æ–≥–æ—Ä—Ç–∞ {i+1}' for i in range(len(chart_data.columns))]
                                                
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ NaN –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                                                chart_data = chart_data.fillna(0)
                                                
                                                # –°—Ç—Ä–æ–∏–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–≥–æ—Ä—Ç
                                                st.line_chart(chart_data)
                                                
                                                with st.expander('–î–µ—Ç–∞–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∞'):
                                                    st.write('–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.')
                                                    st.write(f'–ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö {cohort_selection} –∫–æ–≥–æ—Ä—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.')
                                                    st.dataframe(chart_data)
                                            else:
                                                st.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–≥–æ—Ä—Ç')
                                        except Exception as e_chart:
                                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞: {str(e_chart)}")
                                except Exception as e_viz:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞: {str(e_viz)}")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
                                st.info(f'–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞ –ø–æ –¥–Ω—è–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö {cohort_selection} –∫–æ–≥–æ—Ä—Ç')
                                
                                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ç–µ–Ω—à–µ–Ω—É
                                st.subheader('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
                                
                                # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞
                                if 0 in retention_pivot.columns and 1 in retention_pivot.columns:
                                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ—Ç–µ–Ω—à–µ–Ω –Ω–∞ 1-–π –¥–µ–Ω—å
                                    day_1_retention = retention_pivot[1].mean()
                                    
                                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ 7-–º—É –¥–Ω—é
                                    if 7 in retention_pivot.columns:
                                        day_7_retention = retention_pivot[7].mean()
                                    else:
                                        day_7_retention = None
                                    
                                    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ 14-–º—É –¥–Ω—é
                                    if 14 in retention_pivot.columns:
                                        day_14_retention = retention_pivot[14].mean()
                                    else:
                                        day_14_retention = None
                                    
                                    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                                    col1, col2, col3 = st.columns(3)
                                    
                                    with col1:
                                        st.metric('–û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–π —Ä–µ—Ç–µ–Ω—à–µ–Ω', f'{day_1_retention:.2f}%')
                                    with col2:
                                        if day_7_retention is not None:
                                            st.metric('7-–¥–Ω–µ–≤–Ω—ã–π —Ä–µ—Ç–µ–Ω—à–µ–Ω', f'{day_7_retention:.2f}%')
                                        else:
                                            st.metric('7-–¥–Ω–µ–≤–Ω—ã–π —Ä–µ—Ç–µ–Ω—à–µ–Ω', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')
                                    with col3:
                                        if day_14_retention is not None:
                                            st.metric('14-–¥–Ω–µ–≤–Ω—ã–π —Ä–µ—Ç–µ–Ω—à–µ–Ω', f'{day_14_retention:.2f}%')
                                        else:
                                            st.metric('14-–¥–Ω–µ–≤–Ω—ã–π —Ä–µ—Ç–µ–Ω—à–µ–Ω', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')
                                else:
                                    st.warning('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ä–µ—Ç–µ–Ω—à–µ–Ω–∞')
                            else:
                                st.warning('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–≥–æ—Ä—Ç')
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                st.session_state['data'] = combined_df
                
                st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!')

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
elif st.session_state['data'] is not None:
    combined_df = st.session_state['data']
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    st.subheader('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö')
    st.dataframe(combined_df.head(100), use_container_width=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
    st.subheader('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    
    col1, col2 = st.columns(2)
    
    if 'UserId' in combined_df.columns:
        with col1:
            st.metric('–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', f"{combined_df['UserId'].nunique():,}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    st.subheader('–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ –¥–∞–Ω–Ω—ã—Ö
    if 'Date' in combined_df.columns:
        min_date = pd.to_datetime(combined_df['Date'].min())
        max_date = pd.to_datetime(combined_df['Date'].max())
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if min_date.date() == max_date.date():
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –¥–ª—è –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            default_start_date = min_date.date()
            default_end_date = max_date.date()
        else:
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –±–µ—Ä–µ–º –Ω–µ–¥–µ–ª—é –∏–ª–∏ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏
            default_start_date = max(min_date.date(), (max_date - timedelta(days=7)).date())
            default_end_date = max_date.date()
        
        # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ session_state
        date_range = st.date_input(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
            value=(default_start_date, default_end_date) if st.session_state['date_range'] is None else st.session_state['date_range'],
            min_value=min_date.date(),
            max_value=max_date.date(),
            key="date_input"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ session_state
        st.session_state['date_range'] = date_range
        
        if len(date_range) == 2:
            start_date, end_date = date_range
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
            filtered_df = combined_df[
                (combined_df['Date'] >= start_date) & 
                (combined_df['Date'] <= end_date)
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ session_state
            st.session_state['filtered_df'] = filtered_df
            
            st.write(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: —Å {start_date} –ø–æ {end_date}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Å–ø–∏–Ω–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            if 'Amount' in filtered_df.columns and 'InvoiceType' in filtered_df.columns:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (InvoiceType = 1) –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                paid_df = filtered_df[filtered_df['InvoiceType'] == 1]
                with col2:
                    st.metric('–°—É–º–º–∞ —Å–ø–∏–Ω–æ–≤ –≤ stars', f"{paid_df['Amount'].sum():,.2f}")
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.subheader('–û–±—ä–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º')

# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
st.sidebar.markdown('---')
st.sidebar.info('''
### –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, 
–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ AWS S3.

¬© 2025 –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –î–∞—à–±–æ—Ä–¥
''')